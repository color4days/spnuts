/*
 * PublicMemberAccessor.java
 *
 * Copyright (c) 1997-2007 Sun Microsystems, Inc. All Rights Reserved.
 *
 * See the file "LICENSE.txt" for information on usage and redistribution
 * of this file, and for a DISCLAIMER OF ALL WARRANTIES.
 */
package pnuts.ext;

import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.security.AccessController;
import java.security.PrivilegedAction;
import java.security.PrivilegedActionException;
import java.security.PrivilegedExceptionAction;
import java.util.Map;

import pnuts.lang.Configuration;
import pnuts.lang.Context;
import pnuts.lang.PnutsException;
import pnuts.lang.Property;
import pnuts.lang.Runtime;
import org.pnuts.util.*;
import java.util.*;
import org.pnuts.lang.*;
import pnuts.lang.*;
/**
 * when -p option is given to the pnuts command, this class is used so that
 * public members can be accessed.
 */
public class PublicFieldAccessor extends Configuration {

	private transient Cache fieldCache = new MemoryCache();

	public PublicFieldAccessor() {
	}

	/**
	 * Gets a field value of the target object.
	 * 
	 * @param context
	 *            the context in which the field is read
	 * @param target
	 *            the target object
	 * @param name
	 *            the field name
	 * @return the field value
	 */
    /*
	public Object getField(Context context, Object target, String name) {
		if (target instanceof Context) {
			return ((Context) target).get(name);
		} else if (target instanceof Property) {
			return ((Property) target).get(name, context);
		} else if (target instanceof Map) {
			return ((Map) target).get(name);
		} else {
			return getObjectField(context, target, name);
		}
	}
    */
	/**
	 * Sets a field value of the specified object.
	 * 
	 * @param context  the context in which the field is written.
	 * @param target  the target object
	 * @param name  the field name
	 * @param expr  the field value
	 */
    /*
	public void putField(Context context, Object target, String name, Object expr) {
		if (target instanceof Context) {
			((Context) target).set(name, expr);
		} else if (target instanceof Property) {
			((Property) target).set(name, expr, context);
		} else if (target instanceof Map) {
			((Map) target).put(name, expr);
		} else {
			putObjectField(context, target, name, expr);
		}
	}
    */
    /*
	protected Object getObjectField(Context context, Object target, String name) {
		try {
			return getField(target.getClass(), name).get(target);
		} catch (NoSuchFieldException e1) {
			if (target instanceof Class) {
				return getStaticField(context, (Class) target, name);
			}
			throw new PnutsException("field.notFound", new Object[] { name,
					target.getClass() }, context);
		} catch (PnutsException pe) {
			throw pe;
		} catch (Exception e) {
			throw new PnutsException(e, context);
		}
	}
    */
    /*
	protected void putObjectField(Context context, Object target, String name,
			Object value) {
		try {
			Field field = getField(target.getClass(), name);
			Class type = field.getType();
			if (Runtime.isArray(value) && type.isArray()) {
				if (!type.isInstance(value)) {
					value = Runtime.transform(type, value, null);
				}
			}
			field.set(target, value);
		} catch (NoSuchFieldException e1) {
			throw new PnutsException("field.notFound", new Object[] { name,
					target.getClass() }, context);
		} catch (PnutsException pe) {
			throw pe;
		} catch (Exception e) {
			throw new PnutsException(e, context);
		}
	}
*/
    /*
	public Object getStaticField(Context context, Class clazz, String name) {
		try {
			return getField(clazz, name).get(null);
		} catch (PnutsException p) {
			throw p;
		} catch (NoSuchFieldException f) {
			throw new PnutsException("field.notFound", new Object[] { name,
					clazz }, context);
		} catch (Throwable t) {
			throw new PnutsException(t, context);
		}
	}
    */
    /*
	public void putStaticField(Context context, Class clazz, String name,
			Object value) {
		try {
			Field field = getField(clazz, name);
			Class type = field.getType();
			if (Runtime.isArray(value) && type.isArray()) {
				if (!type.isInstance(value)) {
					value = Runtime.transform(type, value, context);
				}
			}
			field.set(null, value);
		} catch (PnutsException e0) {
			throw e0;
		} catch (NoSuchFieldException f) {
			throw new PnutsException("field.notFound", new Object[] { name,
					clazz }, context);
		} catch (Throwable e) {
			throw new PnutsException(e, context);
		}
	}
    */
	public Method[] getMethods(final Class cls) {
		return (Method[]) AccessController.doPrivileged(new PrivilegedAction() {
			public Object run() {
				return cls.getMethods();
			}
		});
	}

	public Constructor[] getConstructors(final Class cls) {
		return (Constructor[]) AccessController
				.doPrivileged(new PrivilegedAction() {
					public Object run() {
						return cls.getConstructors();
					}
				});
	}
	public Callable toCallable(Object obj) {
		return null;
	}
	public Enumeration toEnumeration(Object obj) {
		if (obj instanceof Enumeration) {
			return (Enumeration) obj;
		} else if (obj instanceof Iterator) {
			return new ItrEnum((Iterator) obj);
		} else if (obj instanceof Object[]){
			return new ObjectArrayEnum((Object[])obj);
		} else if (obj instanceof Collection) {
			return Collections.enumeration((Collection) obj);
		} else if (obj instanceof Map) {
			return new ItrEnum(((Map) obj).entrySet().iterator());
		} else if (Runtime.isArray(obj)) {
			return new ArrayEnum(obj);
		} else if (obj instanceof String) {
			return new StringEnum((String) obj);
		} else {
			return null;
		}
	}
}
